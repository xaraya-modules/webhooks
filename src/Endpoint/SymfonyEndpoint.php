<?php
/**
 * Entrypoint for webhooks (via ws.php) using Symfony Webhook
 *
 * @see https://github.com/symfony/webhook
 */

namespace Xaraya\Modules\Webhooks\Endpoint;

use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\EventDispatcher\EventDispatcher;
use Symfony\Component\HttpFoundation\RequestStack;
use Symfony\Component\HttpKernel\Controller\ArgumentResolver;
use Symfony\Component\HttpKernel\Controller\ControllerResolver;
use Symfony\Component\HttpKernel\HttpKernel;
use Xaraya\Modules\Webhooks\Controller\TestController;
use Xaraya\SymfonyApp\Kernel;
use TypeError;

class SymfonyEndpoint
{
    /** @var array<string, mixed> */
    protected array $config = [];

    public function __construct(array $config = [])
    {
        $this->setConfig($config);
    }

    public function setConfig(array $config)
    {
        $this->config = $config;
    }

    public function run()
    {
        //$this->runWithKernel();
        $this->runWithApp();
    }

    public function getConfig(string $name)
    {
        return $this->config[$name];
    }

    /**
     * @return Request
     */
    public function getRequest()
    {
        // create the Request object
        return Request::createFromGlobals();
    }

    /**
     * @return HttpKernel
     */
    public function getKernel()
    {
        $dispatcher = new EventDispatcher();
        // ... add some event listeners

        // create your controller and argument resolvers
        $controllerResolver = new ControllerResolver();
        $argumentResolver = new ArgumentResolver();

        // instantiate the kernel
        return new HttpKernel($dispatcher, $controllerResolver, new RequestStack(), $argumentResolver);
    }

    /**
     * Using HttpKernel with events
     *
     * @see https://symfony.com/doc/current/components/http_kernel.html#httpkernel-driven-by-events
     */
    public function runWithKernel()
    {
        $request = $this->getRequest();
        // for example, possibly set its _controller manually
        //$request->attributes->set('_controller', [WebhookController::class, 'handle']);
        $request->attributes->set('_controller', [TestController::class, 'handle']);

        $kernel = $this->getKernel();

        // actually execute the kernel, which turns the request into a response
        // by dispatching events, calling a controller, and returning the response
        $response = $kernel->handle($request);

        // send the headers and echo the content
        $response->send();

        // trigger the kernel.terminate event
        $kernel->terminate($request, $response);
    }

    /**
     * Using Symfony App
     * @see https://github.com/xaraya-modules/with-symfony
     */
    public function getApp()
    {
        //require_once dirname(__DIR__).'/vendor/autoload_runtime.php';

        return function (array $context) {
            return new Kernel($context['APP_ENV'], (bool) $context['APP_DEBUG']);
        };
    }

    /**
     * Using Symfony App
     * @see vendor/autoload_runtime.php @generated by Symfony Runtime
     */
    public function runWithApp()
    {
        //$app = require $_SERVER['SCRIPT_FILENAME'];
        $app = $this->getApp();

        if (!is_object($app)) {
            throw new TypeError(sprintf('Invalid return value: callable object expected, "%s" returned from "%s".', get_debug_type($app), $_SERVER['SCRIPT_FILENAME']));
        }

        // @checkme if this was installed in vendor or not
        $dir = dirname(__DIR__, 2);
        while (strlen($dir) > 1 && str_contains($dir, '/vendor')) {
            $dir = dirname($dir);
        }
        // @todo verify default app settings
        $_ENV['APP_DEBUG'] = 0;
        $_ENV['APP_WEBHOOK_ECHO'] = 1;
        $_ENV['APP_CACHE_DIR'] = $dir . '/var/cache';
        $_ENV['APP_LOG_DIR'] = $dir . '/var/log';

        $runtime = $_SERVER['APP_RUNTIME'] ?? $_ENV['APP_RUNTIME'] ?? 'Symfony\\Component\\Runtime\\SymfonyRuntime';
        $runtime = new $runtime(($_SERVER['APP_RUNTIME_OPTIONS'] ?? $_ENV['APP_RUNTIME_OPTIONS'] ?? []) + [
          //'project_dir' => dirname(__DIR__, 1),
          'project_dir' => $dir . '/vendor/xaraya/with-symfony',
        ]);

        [$app, $args] = $runtime
            ->getResolver($app)
            ->resolve();

        $app = $app(...$args);

        $runtime
            ->getRunner($app)
            ->run();
    }
}
